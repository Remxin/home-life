/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.1
// source: service_home_life.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as rpc_add_task_pb from './rpc_add_task_pb'; // proto import: "rpc_add_task.proto"
import * as rpc_add_user_to_family_pb from './rpc_add_user_to_family_pb'; // proto import: "rpc_add_user_to_family.proto"
import * as rpc_assign_task_pb from './rpc_assign_task_pb'; // proto import: "rpc_assign_task.proto"
import * as rpc_create_family_pb from './rpc_create_family_pb'; // proto import: "rpc_create_family.proto"
import * as rpc_create_recipe_pb from './rpc_create_recipe_pb'; // proto import: "rpc_create_recipe.proto"
import * as rpc_create_user_pb from './rpc_create_user_pb'; // proto import: "rpc_create_user.proto"
import * as rpc_delete_recipe_pb from './rpc_delete_recipe_pb'; // proto import: "rpc_delete_recipe.proto"
import * as rpc_delete_task_pb from './rpc_delete_task_pb'; // proto import: "rpc_delete_task.proto"
import * as rpc_get_recipes_pb from './rpc_get_recipes_pb'; // proto import: "rpc_get_recipes.proto"
import * as rpc_get_tasks_pb from './rpc_get_tasks_pb'; // proto import: "rpc_get_tasks.proto"
import * as rpc_login_user_pb from './rpc_login_user_pb'; // proto import: "rpc_login_user.proto"
import * as rpc_mark_task_as_done_pb from './rpc_mark_task_as_done_pb'; // proto import: "rpc_mark_task_as_done.proto"
import * as rpc_renew_access_token_pb from './rpc_renew_access_token_pb'; // proto import: "rpc_renew_access_token.proto"
import * as rpc_update_recipe_pb from './rpc_update_recipe_pb'; // proto import: "rpc_update_recipe.proto"
import * as rpc_verify_user_pb from './rpc_verify_user_pb'; // proto import: "rpc_verify_user.proto"


export class HomeLifeClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/CreateUser',
    grpcWeb.MethodType.UNARY,
    rpc_create_user_pb.CreateUserRequest,
    rpc_create_user_pb.CreateUserResponse,
    (request: rpc_create_user_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    rpc_create_user_pb.CreateUserResponse.deserializeBinary
  );

  createUser(
    request: rpc_create_user_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_create_user_pb.CreateUserResponse>;

  createUser(
    request: rpc_create_user_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_create_user_pb.CreateUserResponse) => void): grpcWeb.ClientReadableStream<rpc_create_user_pb.CreateUserResponse>;

  createUser(
    request: rpc_create_user_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_create_user_pb.CreateUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorVerifyUser = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/VerifyUser',
    grpcWeb.MethodType.UNARY,
    rpc_verify_user_pb.VerifyUserRequest,
    rpc_verify_user_pb.VerifyUserResponse,
    (request: rpc_verify_user_pb.VerifyUserRequest) => {
      return request.serializeBinary();
    },
    rpc_verify_user_pb.VerifyUserResponse.deserializeBinary
  );

  verifyUser(
    request: rpc_verify_user_pb.VerifyUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_verify_user_pb.VerifyUserResponse>;

  verifyUser(
    request: rpc_verify_user_pb.VerifyUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_verify_user_pb.VerifyUserResponse) => void): grpcWeb.ClientReadableStream<rpc_verify_user_pb.VerifyUserResponse>;

  verifyUser(
    request: rpc_verify_user_pb.VerifyUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_verify_user_pb.VerifyUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/VerifyUser',
        request,
        metadata || {},
        this.methodDescriptorVerifyUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/VerifyUser',
    request,
    metadata || {},
    this.methodDescriptorVerifyUser);
  }

  methodDescriptorLoginUser = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/LoginUser',
    grpcWeb.MethodType.UNARY,
    rpc_login_user_pb.LoginUserRequest,
    rpc_login_user_pb.LoginUserResponse,
    (request: rpc_login_user_pb.LoginUserRequest) => {
      return request.serializeBinary();
    },
    rpc_login_user_pb.LoginUserResponse.deserializeBinary
  );

  loginUser(
    request: rpc_login_user_pb.LoginUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_login_user_pb.LoginUserResponse>;

  loginUser(
    request: rpc_login_user_pb.LoginUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_login_user_pb.LoginUserResponse) => void): grpcWeb.ClientReadableStream<rpc_login_user_pb.LoginUserResponse>;

  loginUser(
    request: rpc_login_user_pb.LoginUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_login_user_pb.LoginUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/LoginUser',
        request,
        metadata || {},
        this.methodDescriptorLoginUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/LoginUser',
    request,
    metadata || {},
    this.methodDescriptorLoginUser);
  }

  methodDescriptorCreateFamily = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/CreateFamily',
    grpcWeb.MethodType.UNARY,
    rpc_create_family_pb.CreateFamilyRequest,
    rpc_create_family_pb.CreateFamilyResponse,
    (request: rpc_create_family_pb.CreateFamilyRequest) => {
      return request.serializeBinary();
    },
    rpc_create_family_pb.CreateFamilyResponse.deserializeBinary
  );

  createFamily(
    request: rpc_create_family_pb.CreateFamilyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_create_family_pb.CreateFamilyResponse>;

  createFamily(
    request: rpc_create_family_pb.CreateFamilyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_create_family_pb.CreateFamilyResponse) => void): grpcWeb.ClientReadableStream<rpc_create_family_pb.CreateFamilyResponse>;

  createFamily(
    request: rpc_create_family_pb.CreateFamilyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_create_family_pb.CreateFamilyResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/CreateFamily',
        request,
        metadata || {},
        this.methodDescriptorCreateFamily,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/CreateFamily',
    request,
    metadata || {},
    this.methodDescriptorCreateFamily);
  }

  methodDescriptorAddUserToFamily = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/AddUserToFamily',
    grpcWeb.MethodType.UNARY,
    rpc_add_user_to_family_pb.AddUserToFamilyRequest,
    rpc_add_user_to_family_pb.AddUserToFamilyResponse,
    (request: rpc_add_user_to_family_pb.AddUserToFamilyRequest) => {
      return request.serializeBinary();
    },
    rpc_add_user_to_family_pb.AddUserToFamilyResponse.deserializeBinary
  );

  addUserToFamily(
    request: rpc_add_user_to_family_pb.AddUserToFamilyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_add_user_to_family_pb.AddUserToFamilyResponse>;

  addUserToFamily(
    request: rpc_add_user_to_family_pb.AddUserToFamilyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_add_user_to_family_pb.AddUserToFamilyResponse) => void): grpcWeb.ClientReadableStream<rpc_add_user_to_family_pb.AddUserToFamilyResponse>;

  addUserToFamily(
    request: rpc_add_user_to_family_pb.AddUserToFamilyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_add_user_to_family_pb.AddUserToFamilyResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/AddUserToFamily',
        request,
        metadata || {},
        this.methodDescriptorAddUserToFamily,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/AddUserToFamily',
    request,
    metadata || {},
    this.methodDescriptorAddUserToFamily);
  }

  methodDescriptorAddTask = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/AddTask',
    grpcWeb.MethodType.UNARY,
    rpc_add_task_pb.AddTaskRequest,
    rpc_add_task_pb.AddTaskResponse,
    (request: rpc_add_task_pb.AddTaskRequest) => {
      return request.serializeBinary();
    },
    rpc_add_task_pb.AddTaskResponse.deserializeBinary
  );

  addTask(
    request: rpc_add_task_pb.AddTaskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_add_task_pb.AddTaskResponse>;

  addTask(
    request: rpc_add_task_pb.AddTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_add_task_pb.AddTaskResponse) => void): grpcWeb.ClientReadableStream<rpc_add_task_pb.AddTaskResponse>;

  addTask(
    request: rpc_add_task_pb.AddTaskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_add_task_pb.AddTaskResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/AddTask',
        request,
        metadata || {},
        this.methodDescriptorAddTask,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/AddTask',
    request,
    metadata || {},
    this.methodDescriptorAddTask);
  }

  methodDescriptorMarkTaskAsDone = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/MarkTaskAsDone',
    grpcWeb.MethodType.UNARY,
    rpc_mark_task_as_done_pb.MarkTaskAsDoneRequest,
    rpc_mark_task_as_done_pb.MarkTaskAsDoneResponse,
    (request: rpc_mark_task_as_done_pb.MarkTaskAsDoneRequest) => {
      return request.serializeBinary();
    },
    rpc_mark_task_as_done_pb.MarkTaskAsDoneResponse.deserializeBinary
  );

  markTaskAsDone(
    request: rpc_mark_task_as_done_pb.MarkTaskAsDoneRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_mark_task_as_done_pb.MarkTaskAsDoneResponse>;

  markTaskAsDone(
    request: rpc_mark_task_as_done_pb.MarkTaskAsDoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_mark_task_as_done_pb.MarkTaskAsDoneResponse) => void): grpcWeb.ClientReadableStream<rpc_mark_task_as_done_pb.MarkTaskAsDoneResponse>;

  markTaskAsDone(
    request: rpc_mark_task_as_done_pb.MarkTaskAsDoneRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_mark_task_as_done_pb.MarkTaskAsDoneResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/MarkTaskAsDone',
        request,
        metadata || {},
        this.methodDescriptorMarkTaskAsDone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/MarkTaskAsDone',
    request,
    metadata || {},
    this.methodDescriptorMarkTaskAsDone);
  }

  methodDescriptorDeleteTask = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/DeleteTask',
    grpcWeb.MethodType.UNARY,
    rpc_delete_task_pb.DeleteTaskRequest,
    rpc_delete_task_pb.DeleteTaskResponse,
    (request: rpc_delete_task_pb.DeleteTaskRequest) => {
      return request.serializeBinary();
    },
    rpc_delete_task_pb.DeleteTaskResponse.deserializeBinary
  );

  deleteTask(
    request: rpc_delete_task_pb.DeleteTaskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_delete_task_pb.DeleteTaskResponse>;

  deleteTask(
    request: rpc_delete_task_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_delete_task_pb.DeleteTaskResponse) => void): grpcWeb.ClientReadableStream<rpc_delete_task_pb.DeleteTaskResponse>;

  deleteTask(
    request: rpc_delete_task_pb.DeleteTaskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_delete_task_pb.DeleteTaskResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/DeleteTask',
        request,
        metadata || {},
        this.methodDescriptorDeleteTask,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/DeleteTask',
    request,
    metadata || {},
    this.methodDescriptorDeleteTask);
  }

  methodDescriptorAssignTask = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/AssignTask',
    grpcWeb.MethodType.UNARY,
    rpc_assign_task_pb.AssignTaskRequest,
    rpc_assign_task_pb.AssignTaskResponse,
    (request: rpc_assign_task_pb.AssignTaskRequest) => {
      return request.serializeBinary();
    },
    rpc_assign_task_pb.AssignTaskResponse.deserializeBinary
  );

  assignTask(
    request: rpc_assign_task_pb.AssignTaskRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_assign_task_pb.AssignTaskResponse>;

  assignTask(
    request: rpc_assign_task_pb.AssignTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_assign_task_pb.AssignTaskResponse) => void): grpcWeb.ClientReadableStream<rpc_assign_task_pb.AssignTaskResponse>;

  assignTask(
    request: rpc_assign_task_pb.AssignTaskRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_assign_task_pb.AssignTaskResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/AssignTask',
        request,
        metadata || {},
        this.methodDescriptorAssignTask,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/AssignTask',
    request,
    metadata || {},
    this.methodDescriptorAssignTask);
  }

  methodDescriptorGetTasks = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/GetTasks',
    grpcWeb.MethodType.UNARY,
    rpc_get_tasks_pb.GetTasksRequest,
    rpc_get_tasks_pb.GetTasksResponse,
    (request: rpc_get_tasks_pb.GetTasksRequest) => {
      return request.serializeBinary();
    },
    rpc_get_tasks_pb.GetTasksResponse.deserializeBinary
  );

  getTasks(
    request: rpc_get_tasks_pb.GetTasksRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_get_tasks_pb.GetTasksResponse>;

  getTasks(
    request: rpc_get_tasks_pb.GetTasksRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_get_tasks_pb.GetTasksResponse) => void): grpcWeb.ClientReadableStream<rpc_get_tasks_pb.GetTasksResponse>;

  getTasks(
    request: rpc_get_tasks_pb.GetTasksRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_get_tasks_pb.GetTasksResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/GetTasks',
        request,
        metadata || {},
        this.methodDescriptorGetTasks,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/GetTasks',
    request,
    metadata || {},
    this.methodDescriptorGetTasks);
  }

  methodDescriptorCreateRecipe = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/CreateRecipe',
    grpcWeb.MethodType.UNARY,
    rpc_create_recipe_pb.CreateRecipeRequest,
    rpc_create_recipe_pb.CreateRecipeResponse,
    (request: rpc_create_recipe_pb.CreateRecipeRequest) => {
      return request.serializeBinary();
    },
    rpc_create_recipe_pb.CreateRecipeResponse.deserializeBinary
  );

  createRecipe(
    request: rpc_create_recipe_pb.CreateRecipeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_create_recipe_pb.CreateRecipeResponse>;

  createRecipe(
    request: rpc_create_recipe_pb.CreateRecipeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_create_recipe_pb.CreateRecipeResponse) => void): grpcWeb.ClientReadableStream<rpc_create_recipe_pb.CreateRecipeResponse>;

  createRecipe(
    request: rpc_create_recipe_pb.CreateRecipeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_create_recipe_pb.CreateRecipeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/CreateRecipe',
        request,
        metadata || {},
        this.methodDescriptorCreateRecipe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/CreateRecipe',
    request,
    metadata || {},
    this.methodDescriptorCreateRecipe);
  }

  methodDescriptorUpdateRecipe = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/UpdateRecipe',
    grpcWeb.MethodType.UNARY,
    rpc_update_recipe_pb.UpdateRecipeRequest,
    rpc_update_recipe_pb.UpdateRecipeResponse,
    (request: rpc_update_recipe_pb.UpdateRecipeRequest) => {
      return request.serializeBinary();
    },
    rpc_update_recipe_pb.UpdateRecipeResponse.deserializeBinary
  );

  updateRecipe(
    request: rpc_update_recipe_pb.UpdateRecipeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_update_recipe_pb.UpdateRecipeResponse>;

  updateRecipe(
    request: rpc_update_recipe_pb.UpdateRecipeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_update_recipe_pb.UpdateRecipeResponse) => void): grpcWeb.ClientReadableStream<rpc_update_recipe_pb.UpdateRecipeResponse>;

  updateRecipe(
    request: rpc_update_recipe_pb.UpdateRecipeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_update_recipe_pb.UpdateRecipeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/UpdateRecipe',
        request,
        metadata || {},
        this.methodDescriptorUpdateRecipe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/UpdateRecipe',
    request,
    metadata || {},
    this.methodDescriptorUpdateRecipe);
  }

  methodDescriptorGetRecipes = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/GetRecipes',
    grpcWeb.MethodType.UNARY,
    rpc_get_recipes_pb.GetRecipesRequest,
    rpc_get_recipes_pb.GetRecipesResponse,
    (request: rpc_get_recipes_pb.GetRecipesRequest) => {
      return request.serializeBinary();
    },
    rpc_get_recipes_pb.GetRecipesResponse.deserializeBinary
  );

  getRecipes(
    request: rpc_get_recipes_pb.GetRecipesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_get_recipes_pb.GetRecipesResponse>;

  getRecipes(
    request: rpc_get_recipes_pb.GetRecipesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_get_recipes_pb.GetRecipesResponse) => void): grpcWeb.ClientReadableStream<rpc_get_recipes_pb.GetRecipesResponse>;

  getRecipes(
    request: rpc_get_recipes_pb.GetRecipesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_get_recipes_pb.GetRecipesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/GetRecipes',
        request,
        metadata || {},
        this.methodDescriptorGetRecipes,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/GetRecipes',
    request,
    metadata || {},
    this.methodDescriptorGetRecipes);
  }

  methodDescriptorDeleteRecipe = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/DeleteRecipe',
    grpcWeb.MethodType.UNARY,
    rpc_delete_recipe_pb.DeleteRecipeRequest,
    rpc_delete_recipe_pb.DeleteRecipeResponse,
    (request: rpc_delete_recipe_pb.DeleteRecipeRequest) => {
      return request.serializeBinary();
    },
    rpc_delete_recipe_pb.DeleteRecipeResponse.deserializeBinary
  );

  deleteRecipe(
    request: rpc_delete_recipe_pb.DeleteRecipeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_delete_recipe_pb.DeleteRecipeResponse>;

  deleteRecipe(
    request: rpc_delete_recipe_pb.DeleteRecipeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_delete_recipe_pb.DeleteRecipeResponse) => void): grpcWeb.ClientReadableStream<rpc_delete_recipe_pb.DeleteRecipeResponse>;

  deleteRecipe(
    request: rpc_delete_recipe_pb.DeleteRecipeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_delete_recipe_pb.DeleteRecipeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/DeleteRecipe',
        request,
        metadata || {},
        this.methodDescriptorDeleteRecipe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/DeleteRecipe',
    request,
    metadata || {},
    this.methodDescriptorDeleteRecipe);
  }

  methodDescriptorRenewAccessToken = new grpcWeb.MethodDescriptor(
    '/pb.HomeLife/RenewAccessToken',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    rpc_renew_access_token_pb.RenewAccessTokenResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    rpc_renew_access_token_pb.RenewAccessTokenResponse.deserializeBinary
  );

  renewAccessToken(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<rpc_renew_access_token_pb.RenewAccessTokenResponse>;

  renewAccessToken(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rpc_renew_access_token_pb.RenewAccessTokenResponse) => void): grpcWeb.ClientReadableStream<rpc_renew_access_token_pb.RenewAccessTokenResponse>;

  renewAccessToken(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rpc_renew_access_token_pb.RenewAccessTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.HomeLife/RenewAccessToken',
        request,
        metadata || {},
        this.methodDescriptorRenewAccessToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.HomeLife/RenewAccessToken',
    request,
    metadata || {},
    this.methodDescriptorRenewAccessToken);
  }

}

