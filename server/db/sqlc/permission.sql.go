// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPermissions = `-- name: CreatePermissions :one
INSERT INTO "permissions" (
    id,
    can_read,
    can_edit,
    can_create
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, can_read, can_edit, can_create
`

type CreatePermissionsParams struct {
	ID        uuid.UUID `json:"id"`
	CanRead   bool      `json:"can_read"`
	CanEdit   bool      `json:"can_edit"`
	CanCreate bool      `json:"can_create"`
}

func (q *Queries) CreatePermissions(ctx context.Context, arg CreatePermissionsParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermissions,
		arg.ID,
		arg.CanRead,
		arg.CanEdit,
		arg.CanCreate,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.CanRead,
		&i.CanEdit,
		&i.CanCreate,
	)
	return i, err
}

const getPermissions = `-- name: GetPermissions :one
SELECT id, can_read, can_edit, can_create FROM "permissions"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPermissions(ctx context.Context, id uuid.UUID) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissions, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.CanRead,
		&i.CanEdit,
		&i.CanCreate,
	)
	return i, err
}
