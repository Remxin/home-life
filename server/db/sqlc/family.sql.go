// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: family.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO "families" (
    id,
    name,
    owner_id
) VALUES (
    gen_random_uuid(),
    $1,
    $2
) RETURNING id, name, owner_id, created_at
`

type CreateFamilyParams struct {
	Name    string    `json:"name"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRowContext(ctx, createFamily, arg.Name, arg.OwnerID)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getFamily = `-- name: GetFamily :one
SELECT id, name, owner_id, created_at
FROM families
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetFamily(ctx context.Context, familyID uuid.UUID) (Family, error) {
	row := q.db.QueryRowContext(ctx, getFamily, familyID)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getMembers = `-- name: GetMembers :many
SELECT users.id, users.full_name, users.email, users.hashed_password, users.is_verified, users.password_changed_at, users.created_at
FROM users 
INNER JOIN permissions p USING (id) 
WHERE p.family_id = $1
`

func (q *Queries) GetMembers(ctx context.Context, familyID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getMembers, familyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.HashedPassword,
			&i.IsVerified,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
