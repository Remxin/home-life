// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: family.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO "families" (
    id,
    name,
    owner_id
) VALUES (
    gen_random_uuid(),
    $1,
    $2
) RETURNING id, name, owner_id, created_at
`

type CreateFamilyParams struct {
	Name    string    `json:"name"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRowContext(ctx, createFamily, arg.Name, arg.OwnerID)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getMembers = `-- name: GetMembers :many
SELECT users.id, full_name, email, hashed_password, is_verified, password_changed_at, created_at, p.id, family_id, can_read, can_edit, can_create, can_modify 
FROM users 
INNER JOIN permissions p USING (id) 
WHERE p.family_id = $1
`

type GetMembersRow struct {
	ID                uuid.UUID `json:"id"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	HashedPassword    string    `json:"hashed_password"`
	IsVerified        bool      `json:"is_verified"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
	ID_2              uuid.UUID `json:"id_2"`
	FamilyID          uuid.UUID `json:"family_id"`
	CanRead           bool      `json:"can_read"`
	CanEdit           bool      `json:"can_edit"`
	CanCreate         bool      `json:"can_create"`
	CanModify         bool      `json:"can_modify"`
}

func (q *Queries) GetMembers(ctx context.Context, familyID uuid.UUID) ([]GetMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getMembers, familyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersRow{}
	for rows.Next() {
		var i GetMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.HashedPassword,
			&i.IsVerified,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.ID_2,
			&i.FamilyID,
			&i.CanRead,
			&i.CanEdit,
			&i.CanCreate,
			&i.CanModify,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
