// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: family.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO "families" (
    id,
    name,
    owner
) VALUES (
    gen_random_uuid(),
    $1,
    $2
) RETURNING id, name, owner
`

type CreateFamilyParams struct {
	Name  string    `json:"name"`
	Owner uuid.UUID `json:"owner"`
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRowContext(ctx, createFamily, arg.Name, arg.Owner)
	var i Family
	err := row.Scan(&i.ID, &i.Name, &i.Owner)
	return i, err
}

const getMembers = `-- name: GetMembers :many
SELECT id, full_name, email, is_verified, created_at FROM "users"
WHERE family = $1
`

type GetMembersRow struct {
	ID         uuid.UUID `json:"id"`
	FullName   string    `json:"full_name"`
	Email      string    `json:"email"`
	IsVerified bool      `json:"is_verified"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) GetMembers(ctx context.Context, familyID uuid.NullUUID) ([]GetMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getMembers, familyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersRow{}
	for rows.Next() {
		var i GetMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.IsVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
