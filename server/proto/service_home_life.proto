syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "rpc_create_user.proto";
import "rpc_verify_user.proto";
import "rpc_login_user.proto";
import "rpc_create_family.proto";
import "rpc_add_user_to_family.proto";
import "rpc_add_task.proto";
import "rpc_assign_task.proto";
import "rpc_mark_task_as_done.proto";
import "rpc_delete_task.proto";
import "rpc_get_tasks.proto";
import "rpc_create_recipe.proto";
import "rpc_update_recipe.proto";
import "rpc_get_recipes.proto";
import "rpc_delete_recipe.proto";
import "rpc_renew_access_token.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/Remxin/home-life/server/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Home Life API";
        version: "1.1";
        contact: {
            name: "Dawid";
            url: "github.com/Remxin/home-life/server";
            email: "remxin7@gmail.com";
        };
    };
};



service HomeLife {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/create_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a new user";
            summary: "Create new user";
        };
    }

    rpc VerifyUser (VerifyUserRequest) returns (VerifyUserResponse) {
        option (google.api.http) = {
            get: "/v1/verify_user",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to verify created user email";
            summary: "Verify user email"
        };
    }

    rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {
            post: "/v1/login_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to login user";
            summary: "Login user"
        };
    }

    rpc CreateFamily (CreateFamilyRequest) returns (CreateFamilyResponse) {
        option (google.api.http) = {
            post: "/v1/family"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a family group";
            summary: "Create family group"
        };
    }

    rpc AddUserToFamily (AddUserToFamilyRequest) returns (AddUserToFamilyResponse) {
        option (google.api.http) = {
            post: "/v1/family/add_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to add user to a family";
            summary: "Add user to a family"
        };
    }

    rpc AddTask (AddTaskRequest) returns (AddTaskResponse) {
        option (google.api.http) = {
            post: "/v1/task"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to add a new task";
            summary: "Add new task"
        };
    }

    rpc MarkTaskAsDone (MarkTaskAsDoneRequest) returns (MarkTaskAsDoneResponse) {
        option (google.api.http) = {
            post: "/v1/task/mark-as-done"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to mark task as done";
            summary: "Mark task as done"
        };
    }

    rpc DeleteTask (DeleteTaskRequest) returns (DeleteTaskResponse) {
        option (google.api.http) = {
            delete: "/v1/task"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to delete task";
            summary: "Delete task"
        };
    }

    rpc AssignTask (AssignTaskRequest) returns (AssignTaskResponse) {
        option (google.api.http) = {
            post: "/v1/task/assign"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to assign a task to a family member";
            summary: "Assign task"
        };
    }

    rpc GetTasks (GetTasksRequest) returns (GetTasksResponse) {
        option (google.api.http) = {
            get: "/v1/task"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get tasks";
            summary: "Get tasks"
        };
    }

    rpc CreateRecipe (CreateRecipeRequest) returns (CreateRecipeResponse) {
        option (google.api.http) = {
            post: "/v1/recipe"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a recipe";
            summary: "Create Recipe"
        };
    }

    rpc UpdateRecipe (UpdateRecipeRequest) returns (UpdateRecipeResponse) {
        option (google.api.http) = {
            patch: "/v1/recipe"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update recipe";
            summary: "Update Recipe"
        };
    }

    rpc GetRecipes (GetRecipesRequest) returns (GetRecipesResponse) {
        option (google.api.http) = {
            get: "/v1/recipe"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get recipes";
            summary: "Get Recipes"
        };
    }

    rpc DeleteRecipe (DeleteRecipeRequest) returns (DeleteRecipeResponse) {
        option (google.api.http) = {
            delete: "/v1/recipe"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to delete a recipe";
            summary: "Delete Recipe"
        };
    }

    rpc RenewAccessToken (google.protobuf.Empty)returns (RenewAccessTokenResponse) {
        option (google.api.http) = {
            post: "/v1/user/renew_token"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to renew users access token";
            summary: "Renew users access token"
        };
    }
}